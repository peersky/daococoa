[
  "event GameClosed(uint256 indexed gameId)",
  "event GameStarted(uint256 indexed gameId)",
  "event PlayerJoined(uint256 indexed gameId, address participant)",
  "event PlayerLeft(uint256 indexed gameId, address indexed player)",
  "event RegistrationOpen(uint256 indexed gameid)",
  "event gameCreated(uint256 gameId, address indexed gm, address indexed creator, uint256 rank)",
  "function cancelGame(uint256 gameId)",
  "function createGame(address gameMaster, uint256 gameRank) payable",
  "function createGame(address gameMaster, uint256 gameId, uint256 gameRank) payable",
  "function getContractState() view returns (tuple(tuple(uint256 gamePrice, uint256 joinGamePrice, uint256 numGames, address rankTokenAddress, bool contractInitialized) BestOfState, tuple(uint256 blocksPerTurn, uint256 maxPlayersSize, uint256 minPlayersSize, uint256 blocksToJoin, uint256 maxTurns, uint256 numWinners) TBGSEttings))",
  "function getGM(uint256 gameId) view returns (address)",
  "function getPlayersGame(address player) view returns (uint256)",
  "function getScores(uint256 gameId) view returns (address[], uint256[])",
  "function getTurn(uint256 gameId) view returns (uint256)",
  "function isGameOver(uint256 gameId) view returns (bool)",
  "function isLastTurn(uint256 gameId) view returns (bool)",
  "function isOvertime(uint256 gameId) view returns (bool)",
  "function joinGame(uint256 gameId) payable",
  "function leaveGame(uint256 gameId)",
  "function onERC1155BatchReceived(address operator, address, uint256[], uint256[], bytes) view returns (bytes4)",
  "function onERC1155Received(address operator, address, uint256, uint256, bytes) view returns (bytes4)",
  "function onERC721Received(address operator, address, uint256, bytes) view returns (bytes4)",
  "function openRegistration(uint256 gameId)",
  "function startGame(uint256 gameId)",
  "function submitVote(uint256 gameId, bytes32[3] votesHidden, bytes proof, bytes submitSignature)",
  "function currentChainId() view returns (uint256)",
  "function inspectEIP712Hashes() view returns (bytes32 _CACHED_DOMAIN_SEPARATOR, uint256 _CACHED_CHAIN_ID, address _CACHED_THIS, bytes32 _HASHED_NAME, bytes32 _HASHED_VERSION, bytes32 _TYPE_HASH)",
  "event RequirementsConfigured(uint256 indexed gameId, tuple(tuple(uint256 have, uint256 lock, uint256 burn, uint256 pay, uint256 bet) ethValues, tuple(address contractAddress, uint256 contractId, uint8 contractType, tuple(tuple(bytes data, uint256 amount) have, tuple(bytes data, uint256 amount) lock, tuple(bytes data, uint256 amount) burn, tuple(bytes data, uint256 amount) pay, tuple(bytes data, uint256 amount) bet) contractRequirement)[] contracts) config)",
  "function getJoinRequirements(uint256 gameId) view returns (tuple(tuple(uint256 have, uint256 lock, uint256 burn, uint256 pay, uint256 bet) ethValues, uint256 timesRefunded, uint256 timesReleased, uint256 timesFunded, address[] conctractAddresses, uint256[] contractIds, bool _isConfigured))",
  "function getJoinRequirementsByToken(uint256 gameId, address contractAddress, uint256 contractId, uint8 contractType) view returns (tuple(tuple(bytes data, uint256 amount) have, tuple(bytes data, uint256 amount) lock, tuple(bytes data, uint256 amount) burn, tuple(bytes data, uint256 amount) pay, tuple(bytes data, uint256 amount) bet))",
  "function setJoinRequirements(uint256 gameId, tuple(tuple(uint256 have, uint256 lock, uint256 burn, uint256 pay, uint256 bet) ethValues, tuple(address contractAddress, uint256 contractId, uint8 contractType, tuple(tuple(bytes data, uint256 amount) have, tuple(bytes data, uint256 amount) lock, tuple(bytes data, uint256 amount) burn, tuple(bytes data, uint256 amount) pay, tuple(bytes data, uint256 amount) bet) contractRequirement)[] contracts) config)",
  "event GameOver(uint256 indexed gameId, address[] indexed players, uint256[] indexed scores)",
  "event LastTurn(uint256 indexed gameId)",
  "event OverTime(uint256 indexed gameId)",
  "event ProposalSubmitted(uint256 indexed gameId, bytes32 hashedProposer, bytes indexed proof, string indexed proposal)",
  "event TurnEnded(uint256 indexed gameId, uint256 indexed turn, address[] players, uint256[] scores, bytes32 indexed turnSalt)",
  "function checkSignature(bytes message, bytes signature, address account) view returns (bool)",
  "function endTurn(uint256 gameId, bytes32 turnSalt, address[] voters, string[3][] votesRevealed)",
  "function playerSalt(address player, bytes32 turnSalt) pure returns (bytes32)",
  "function submitProposal(uint256 gameId, bytes32 proposerHidden, bytes proof, string proposal)",
  "function validateVote(uint256 gameId, address voter, string[3] vote, bytes32 turnSalt) view",
  "function facetAddress(bytes4 _functionSelector) view returns (address facetAddress_)",
  "function facetAddresses() view returns (address[] facetAddresses_)",
  "function facetFunctionSelectors(address _facet) view returns (bytes4[] facetFunctionSelectors_)",
  "function facets() view returns (tuple(address facetAddress, bytes4[] functionSelectors)[] facets_)",
  "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "function owner() view returns (address owner_)",
  "function transferOwnership(address _newOwner)"
]
